// Code generated by MockGen. DO NOT EDIT.
// Source: .\pkg\facade\go.mongodb.org\mongo-driver\mongo\index_view.go

// Package mock_mongo is a generated GoMock package.
package mock_mongo

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	mongo "go.mongodb.org/mongo-driver/mongo"
	options "go.mongodb.org/mongo-driver/mongo/options"
)

// MockIndexView is a mock of IndexView interface.
type MockIndexView struct {
	ctrl     *gomock.Controller
	recorder *MockIndexViewMockRecorder
}

// MockIndexViewMockRecorder is the mock recorder for MockIndexView.
type MockIndexViewMockRecorder struct {
	mock *MockIndexView
}

// NewMockIndexView creates a new mock instance.
func NewMockIndexView(ctrl *gomock.Controller) *MockIndexView {
	mock := &MockIndexView{ctrl: ctrl}
	mock.recorder = &MockIndexViewMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIndexView) EXPECT() *MockIndexViewMockRecorder {
	return m.recorder
}

// CreateOne mocks base method.
func (m *MockIndexView) CreateOne(indexView mongo.IndexView, ctx context.Context, model mongo.IndexModel, opts ...*options.CreateIndexesOptions) (string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{indexView, ctx, model}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateOne", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOne indicates an expected call of CreateOne.
func (mr *MockIndexViewMockRecorder) CreateOne(indexView, ctx, model interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{indexView, ctx, model}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOne", reflect.TypeOf((*MockIndexView)(nil).CreateOne), varargs...)
}
